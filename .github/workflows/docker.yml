name: docker
on: [push]
jobs:
  buildx:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # default is 360
    strategy:
      matrix:
        python:
        - 3.6
        - 3.7
        - 3.8
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # Python 3.7 is the fastest to setup
    - name: Set up Python 3.7 (base)
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install Poetry
      run: pip -q --no-input install poetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      id: poetry-cache
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-py3.7-pypoetry-${{ hashFiles('poetry.lock') }}
        restore-keys: ${{ runner.os }}-py3.7-pypoetry-
    - name: Install Poetry dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: poetry install -n --no-root
    - name: Generate protobuf files
      run: poetry run make protos
    - name: Prepare tags
      id: prep
      run: |
        DOCKER_IMAGE=hathornetwork/hathor-core
        VERSION=noop
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        BASE_VERSION=$VERSION
        SUFFIX=python${{ matrix.python }}
        VERSION="${VERSION}-${SUFFIX}"
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        # default python version is 3.8
        if [[ "${{ matrix.python }}" == "3.8" ]]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:${BASE_VERSION}"
        fi
        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          if [[ "${{ matrix.python }}" == "3.8" ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          else
            MINOR=${VERSION%.*}-${SUFFIX}
            MAJOR=${MINOR%.*}-${SUFFIX}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}"
          fi
        #elif [ "${{ github.event_name }}" = "push" ]; then
          #TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-py${{ matrix.python }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-py${{ matrix.python }}-
          ${{ runner.os }}-buildx-
    - name: Set up QEMU  # arm64 is not available natively
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        install: true
        driver-opts: network=host
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      id: docker_build
      with:
        context: .
        file: ./Dockerfile
        build-args: PYTHON_VERSION=${{ matrix.python }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          network.hathor.core.title=${{ github.event.repository.name }}
          network.hathor.core.description=${{ github.event.repository.description }}
          network.hathor.core.url=${{ github.event.repository.html_url }}
          network.hathor.core.source=${{ github.event.repository.clone_url }}
          network.hathor.core.version=${{ steps.prep.outputs.version }}
          network.hathor.core.created=${{ steps.prep.outputs.created }}
          network.hathor.core.revision=${{ github.sha }}
          network.hathor.core.licenses=${{ github.event.repository.license.spdx_id }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
