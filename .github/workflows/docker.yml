name: docker
on:
  push:
    branches:
    - master
    - dev
    - 'experimental/**'
    tags:
    - v*
  # pull_request:
  #   branches:
  #   - dev
  schedule:
  - cron: '0 4 * * *'  # nightlies at 4am UTC
jobs:
  buildx:
    name: docker buildx ${{ matrix.python-impl }}-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 180  # default is 360
    strategy:
      matrix:
        python-impl:
        - cpython
        python-version:
        - 3.6
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python 3.6 (base)
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: Install Poetry
      run: pip -q --no-input install poetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      id: poetry-cache
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-py3.6-pypoetry-${{ hashFiles('poetry.lock') }}
    - name: Install Poetry dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: poetry install -n --no-root
    - name: Generate protobuf files
      run: poetry run make protos
    - name: Prepare tags
      id: prep
      run: |
        DOCKER_IMAGE=hathornetwork/hathor-core
        GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/hathor-core
        VERSION=noop
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        BASE_VERSION=$VERSION
        DOCKERFILE=Dockerfile
        SUFFIX=python${{ matrix.python-version }}
        if [[ "${{ matrix.python-impl }}" == "pypy" ]]; then
          DOCKERFILE=Dockerfile.pypy
          SUFFIX=pypy${{ matrix.python-version }}
        fi
        VERSION="${VERSION}-${SUFFIX}"
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        TAGS="${TAGS},${GHCR_IMAGE}:${VERSION}"
        if [[ $SUFFIX == "python3.6" ]]; then
          # default python version is python3.6
          TAGS="$TAGS,${DOCKER_IMAGE}:${BASE_VERSION}"
          TAGS="$TAGS,${GHCR_IMAGE}:${BASE_VERSION}"
        elif [[ $SUFFIX == "pypy3.6" ]]; then
          # default pypy version is pypy3.6
          TAGS="$TAGS,${DOCKER_IMAGE}:${BASE_VERSION}-pypy"
          TAGS="$TAGS,${GHCR_IMAGE}:${BASE_VERSION}-pypy"
        fi
        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}-${SUFFIX}
          MAJOR=${MINOR%.*}-${SUFFIX}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}"
          TAGS="$TAGS,${GHCR_IMAGE}:${MINOR},${GHCR_IMAGE}:${MAJOR},${GHCR_IMAGE}"
          if [[ $SUFFIX == "python3.6" ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
            TAGS="$TAGS,${GHCR_IMAGE}:${MINOR},${GHCR_IMAGE}:${MAJOR},${GHCR_IMAGE}:latest"
          fi
        elif [ "${{ github.event_name }}" = "push" ]; then
          # TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}-${SUFFIX}"  # these tags are annoying on docker
          TAGS="$TAGS,${GHCR_IMAGE}:sha-${GITHUB_SHA::8}-${SUFFIX}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=dockerfile::${DOCKERFILE}
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # this key is setup such that every branch has its cache and new branches can reuse dev's cache, but not the other way around
        key: ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-${{ github.head_ref || github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-${{ github.head_ref || github.ref }}-
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-${{ github.base_ref }}-
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-
    - name: Set up QEMU  # arm64 is not available natively
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        install: true
        driver-opts: network=host
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      id: docker_build
      with:
        context: .
        file: ${{ steps.prep.outputs.dockerfile }}
        build-args: PYTHON_VERSION=${{ matrix.python-version }}
        platforms: linux/amd64,linux/arm64
        pull: true
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          network.hathor.core.title=${{ github.event.repository.name }}
          network.hathor.core.description=${{ github.event.repository.description }}
          network.hathor.core.url=${{ github.event.repository.html_url }}
          network.hathor.core.source=${{ github.event.repository.clone_url }}
          network.hathor.core.version=${{ steps.prep.outputs.version }}
          network.hathor.core.created=${{ steps.prep.outputs.created }}
          network.hathor.core.revision=${{ github.sha }}
          network.hathor.core.licenses=${{ github.event.repository.license.spdx_id }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
