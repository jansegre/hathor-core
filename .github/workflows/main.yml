name: tests
on:
  push:
    branches:
    - master
    - dev
    - 'workflow/**'
    tags:
    - v*
  pull_request:
    branches:
    - dev
jobs:
  test:
    name: tests python-${{ matrix.python }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40  # default is 360
    strategy:
      matrix:
        python:
        - 3.6
        - 3.7
        os:
        - ubuntu-latest
        - macos-latest
        tier: [1]
        include:
        - os: ubuntu-latest
          python: 3.8
          tier: 1
        - os: macos-latest
          python: 3.8
          tier: 1
        - os: windows-latest
          python: 3.6
          tier: 2
        - os: windows-latest
          python: 3.7
          tier: 2
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get -y -q install graphviz librocksdb-dev libsnappy-dev liblz4-dev
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: brew install -q graphviz rocksdb
    - name: Install Poetry
      run: pip -q --no-input install poetry
    - name: Get Poetry cache-dir
      id: poetry-install
      shell: bash
      run: echo ::set-output name=cache-dir::$(poetry config cache-dir)
    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      id: poetry-cache
      # skip on Windows because `Compile protos` hangs
      if: matrix.os != 'windows-latest'
      with:
        path: ${{ steps.poetry-install.outputs.cache-dir }}
        key: ${{ runner.os }}-py${{ matrix.python }}-pypoetry-${{ hashFiles('poetry.lock') }}
    - name: Install Poetry dependencies (with rocksdb)
      if: steps.poetry-cache.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
      run: poetry install -n -E rocksdb --no-root
    - name: Install Poetry dependencies (without rocksdb)
      if: steps.poetry-cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
      run: poetry install -n --no-root
    - name: Compile protos
      run: poetry run make protos
    - name: Cache mypy
      uses: actions/cache@v2
      with:
        path: .mypy_cache
        # this key is setup such that every branch has its cache and new branches can reuse dev's cache, but not the other way around
        key: ${{ runner.os }}-py${{ matrix.python }}-mypy-${{ github.head_ref || github.ref }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python }}-mypy-dev
          ${{ runner.os }}-py${{ matrix.python }}-mypy-
    - name: Run linters
      run: poetry run make check
    - name: Run tests
      run: poetry run make tests
      continue-on-error: ${{ matrix.tier > 1 }}
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      if: github.event_name == 'pull_request' && matrix.python == 3.6 && matrix.os == 'ubuntu-latest'
