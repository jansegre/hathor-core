name: tests
on:
  push:
    branches:
    - master
    - dev
    - 'workflow/**'
    tags:
    - v*
  pull_request:
    branches:
    - dev
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # default is 360
    strategy:
      matrix:
        python_version:
        - '3.6'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python_version }}
    - name: Install system dependencies
      run: |
        sudo apt-get install -y graphviz librocksdb-dev libsnappy-dev liblz4-dev
        pip install poetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      id: poetry-cache
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    - name: Install Poetry dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: |
        poetry install -n -E rocksdb --no-root
    - name: Generate protobuf files
      run: poetry run make protos
    - name: Cache mypy
      uses: actions/cache@v2
      with:
        path: .mypy_cache
        # this key is setup such that every branch has its cache
        # TODO: skip cache on tag refs (as not to waste cache storage)
        key: ${{ runner.os }}-mypy-${{ github.head_ref || github.ref }}
        restore-keys: |
          ${{ runner.os }}-mypy-dev
    - name: Run Linters
      run: poetry run make check
    - name: Run tests
      run: poetry run make tests
    - name: Codecov
      uses: codecov/codecov-action@v1
      if: ${{ github.event_name == 'pull_request' }}
